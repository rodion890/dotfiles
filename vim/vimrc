" vim-plug install
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" plugins can be loaded now
call plug#begin('~/.vim/plugged')
  Plug 'tpope/vim-endwise'
  Plug 'janko/vim-test'
  Plug '/usr/local/opt/fzf'
  Plug 'junegunn/fzf.vim'
  Plug 'sainnhe/edge'
  Plug 'ajh17/VimCompletesMe'
  Plug 'preservim/nerdtree'
  Plug 'neomake/neomake'
  Plug 'ntpeters/vim-better-whitespace'
  Plug 'tpope/vim-rails'
  Plug 'airblade/vim-gitgutter'
  Plug 'ludovicchabant/vim-gutentags'
  Plug 'airblade/vim-localorie'
call plug#end()

" encoding
set encoding=utf-8

" theme
set background=dark
let g:edge_disable_italic_comment = 1
colorscheme edge

" search hightlight
set hlsearch
highlight Search ctermbg=Yellow ctermfg=235

" basic stuff
set backspace=2
set nobackup
set nowritebackup
set noswapfile
set splitbelow
set splitright
set equalalways
"set hidden
set lazyredraw

" show file name always in status line
set laststatus=2

" leader is space
let mapleader = " "

" indenting
set autoindent
set smartindent

"folding
" set foldmethod=indent

" whitespace
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab

" ruler
set ruler
set colorcolumn=81
set colorcolumn+=101

" sign column on
set signcolumn=yes

" cursor line
set cul

" ruby syntax only runs well with the old regex engine
set regexpengine=1

" line numbers
set number

" spelling
set spelllang=en_gb

" system clipboard
"set clipboard=unnamed

" wild menu
set wildmenu
set wildmode=list:longest,full

" tab complete only the current buffer, included files, buffer list, other
" unloaded buffers, window, open buffers, tags and spelling (when
" spelling is enabled)
set complete=.,i,b,w,u,t,kspell

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Quicker closing
noremap <C-c> <C-w>c

" Quicker window zooms
nnoremap <C-\> <C-w>\|
nnoremap <C-_> <C-w>=

" don't use arrow keys
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" source it
command! Src execute 'source ~/.vimrc'

" configure fzf
let g:fzf_layout = { 'down': '50%' }

" I want to use 'ag' not 'grep'
set grepprg=ag\ --nogroup\ --nocolor\ --column\ --vimgrep

" Find is my command to find something, put it in the quickfix and redraw
command! -nargs=+ Find execute 'silent grep! <args>' | botright copen 20| redraw!

" b for buffer search
nnoremap <leader>b :Buffers<cr>

" F to search content
nnoremap <leader>F :Find<space>

" f to search files
nnoremap <leader>f :Files<cr>

" Use ag in fzf for listing files. Lightning fast and respects .gitignore
let $FZF_DEFAULT_COMMAND = 'ag --literal --files-with-matches --nocolor --hidden -g ""'

" vim-test
nnoremap <silent> <Leader>t :TestFile<CR>
nnoremap <silent> <Leader>s :TestNearest<CR>
nnoremap <silent> <Leader>l :TestLast<CR>
nnoremap <silent> <Leader>a :TestSuite<CR>
nnoremap <silent> <Leader>gt :TestVisit<CR>
nnoremap <silent> <Leader>L :TestLastFailures<CR>

command! TestLastFailures execute 'TestLast --only-failures'

let test#strategy = "vimterminal"
let test#enabled_runners = ["ruby#rspec", "ruby#minitest"]
let test#ruby#use_binstubs = 0

" Nerd Tree
nnoremap <silent> ` :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
let NERDTreeHighlightCursorline=1
let NERDTreeWinSize=40
let NERDTreeMinimalUI=1
let NERDTreeAutoDeleteBuffer=1

" Neomake
" run on normal mode, read buffer, write buffer, insert mode changes, 500 ms
" delay
call neomake#configure#automake('nrwi', 500)

let g:neomake_ruby_standardrb_maker = {
        \ 'exe': 'bundle',
        \ 'args': ['exec', 'standardrb', '--format', 'emacs', '--force-exclusion', '--display-cop-names'],
        \ 'errorformat': '%f:%l:%c: %t: %m,%E%f:%l: %m',
        \ 'postprocess': function('neomake#makers#ft#ruby#RubocopEntryProcess'),
        \ 'output_stream': 'stdout',
        \ }
let g:neomake_ruby_enabled_makers = ['standardrb']

let g:neomake_error_sign = {
    \ 'text': '>>',
    \ 'texthl': 'NeomakeErrorSign',
    \ }
let g:neomake_warning_sign = {
    \   'text': '--',
    \   'texthl': 'NeomakeWarningSign',
    \ }
let g:neomake_message_sign = {
    \   'text': '--',
    \   'texthl': 'NeomakeMessageSign',
    \ }
let g:neomake_info_sign = {
    \ 'text': '--',
    \ 'texthl': 'NeomakeInfoSign'
    \ }

" whitespace trimmer
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1
let g:strip_whitespace_confirm=0
let g:better_whitespace_ctermcolor='black'

" file specific
" markdown
augroup markdown
autocmd!
autocmd BufRead,BufNewFile *.md setlocal textwidth=80
autocmd BufRead,BufNewFile *.md setlocal colorcolumn=81
autocmd BufRead,BufNewFile *.md setlocal wrap
autocmd BufRead,BufNewFile *.md setlocal spell
augroup END

" git commit message
augroup gitcommit
autocmd!
autocmd FileType gitcommit setlocal spell
autocmd FileType gitcommit setlocal wrap
autocmd FileType gitcommit setlocal textwidth=72
autocmd FileType gitcommit setlocal colorcolumn=73
autocmd FileType gitcommit setlocal colorcolumn+=51
augroup END

" localorie switches to quickfix when called
let g:localorie = {
    \ 'switch':    1
    \ }
nnoremap <silent> <leader>lt :call localorie#translate()<CR>
nnoremap <silent> <leader>le :call localorie#expand_key()<CR>
