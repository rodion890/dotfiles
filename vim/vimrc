" vim-plug install
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" plugins can be loaded now
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-rails'
Plug 'tpope/vim-fugitive'
Plug 'crusoexia/vim-monokai'
Plug 'dense-analysis/ale'
Plug 'tpope/vim-endwise'
Plug 'Yggdroot/indentLine'
Plug 'janko/vim-test'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'ervandew/supertab'
call plug#end()

set encoding=utf-8

" theme
colorscheme monokai

" Don't try to be vi compatible
set nocompatible

" syntax highlighting
syntax on

" search hightlight
set hlsearch

" show file name always in status line
set laststatus=2

" line numbers
set number relativenumber
set numberwidth=5

" sensible
set backspace=2
set nobackup
set nowritebackup
set noswapfile
set splitbelow
set splitright
set equalalways

" ruler
set ruler
set textwidth=80
set colorcolumn=+1

" indenting
set autoindent
set smartindent

" whitespace
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab

" spelling
set spelllang=en_gb
set complete+=kspell

" file specific
  au BufRead,BufNewFile *.md setlocal textwidth=80
  autocmd BufRead,BufNewFile *.md setlocal wrap
  autocmd BufRead,BufNewFile *.md setlocal spell | set wrap

" spelling for filetypes
  autocmd FileType gitcommit setlocal spell

" netrw
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_localrmdir='rm -r'

" leader is space
let mapleader = " "

" don't use arrow keys
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" vim-test run with bundler
let test#ruby#rspec#executable = 'bundle exec rspec'

" vim-test mappings
nnoremap <silent> <Leader>t :TestFile<CR>
nnoremap <silent> <Leader>s :TestNearest<CR>
nnoremap <silent> <Leader>l :TestLast<CR>
nnoremap <silent> <Leader>a :TestSuite<CR>
nnoremap <silent> <Leader>gt :TestVisit<CR>

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" close quickfix windoew
nnoremap . :cclose<cr>

" ALE
let g:ale_lint_on_save =  0
let g:ale_lint_on_insert_leave = 1
let g:ale_linters_explicit = 1
let g:ale_sign_column_always = 1
" let g:ale_lint_delay = 2000

" ruby linitng
let g:ale_linters = {
\   'ruby': ['standardrb'],
\}

" white space fixing
let g:ale_fix_on_save = 1
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\}

" I want to use 'ag' not 'grep'
set grepprg=ag\ --nogroup\ --nocolor\ --column\ --vimgrep

" Find is my command to find something, put it in the quickfix and redraw
command! -nargs=+ Find execute 'silent grep! <args>' | copen 25| redraw!

"start a search query by pressing \
nnoremap \ :Find<space>

"search for word under cursor by pressing |
nnoremap \| :Find "\b<C-R><C-W>\b"<cr>

" Use ag in fzf for listing files. Lightning fast and respects .gitignore
let $FZF_DEFAULT_COMMAND = 'ag --literal --files-with-matches --nocolor --hidden -g ""'

" crtl-p search files
nnoremap ; :Files<cr>
